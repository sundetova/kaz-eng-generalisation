#line 2 "apertium_postlatex.cc"

#line 4 "apertium_postlatex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yyconst flex_int16_t yy_nxt[][54] =
    {
    {
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0
    },

    {
        7,    8,    9,   10,    8,    8,    8,   11,    8,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    8,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,   12,   13,   14
    },

    {
        7,    8,    9,   10,    8,    8,    8,   11,    8,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    8,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,   12,   13,   14
    },

    {
        7,   15,   15,   15,   15,   15,   15,   16,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15
    },

    {
        7,   15,   15,   15,   15,   15,   15,   16,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15

    },

    {
        7,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17
    },

    {
        7,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17
    },

    {
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7
    },

    {
        7,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,

       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8
    },

    {
        7,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9

    },

    {
        7,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,   18,  -10,  -10,  -10,  -10,  -10,  -10,  -10,   19,
       20,   21,  -10,  -10,  -10,   22,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10
    },

    {
        7,  -11,  -11,  -11,   23,   24,  -11,  -11,  -11,   25,
       26,   27,   24,   28,   24,   24,   29,   24,   24,   30,
       31,   24,   24,   32,   33,   24,   24,   34,  -11,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -11,

      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11
    },

    {
        7,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,   35,  -12,  -12,  -12,
       36,  -12,  -12,  -12
    },

    {
        7,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,

      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
       37,   38,  -13,  -13,   39,   40,  -13,   41,   42,   43,
      -13,  -13,  -13,  -13
    },

    {
        7,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,   44,
      -14,  -14,   45,   46,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14

    },

    {
        7,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15
    },

    {
        7,  -16,  -16,  -16,   47,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,

      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16
    },

    {
        7,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17
    },

    {
        7,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
       48,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,

      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18
    },

    {
        7,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,   49,  -19,   50,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19

    },

    {
        7,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,   51,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20
    },

    {
        7,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,   52,  -21,  -21,

      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21
    },

    {
        7,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,   53,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22
    },

    {
        7,  -23,  -23,  -23,  -23,   54,  -23,  -23,  -23,   54,
       54,   55,   54,   54,   54,   54,   54,   54,   54,   54,

       56,   54,   54,   57,   54,   54,   54,   58,  -23,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  -23,
      -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,
      -23,  -23,  -23,  -23
    },

    {
        7,  -24,  -24,  -24,   59,   24,  -24,  -24,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -24,
      -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,
      -24,  -24,  -24,  -24

    },

    {
        7,  -25,  -25,  -25,   59,   24,  -25,  -25,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       62,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -25,
      -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,  -25
    },

    {
        7,  -26,  -26,  -26,   59,   24,  -26,  -26,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   63,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -26,

      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26
    },

    {
        7,  -27,  -27,  -27,   59,   24,  -27,  -27,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   64,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27
    },

    {
        7,  -28,  -28,  -28,   59,   24,  -28,  -28,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   65,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28
    },

    {
        7,  -29,  -29,  -29,   59,   24,  -29,  -29,   60,   66,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29

    },

    {
        7,  -30,  -30,  -30,   59,   24,  -30,  -30,   60,   24,
       24,   24,   24,   67,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30
    },

    {
        7,  -31,  -31,  -31,   59,   24,  -31,  -31,   60,   68,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -31,

      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31
    },

    {
        7,  -32,  -32,  -32,   59,   24,  -32,  -32,   60,   69,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32
    },

    {
        7,  -33,  -33,  -33,   59,   24,  -33,  -33,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   70,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33
    },

    {
        7,  -34,  -34,  -34,   59,   24,  -34,  -34,   60,   24,
       24,   24,   24,   71,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34

    },

    {
        7,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35
    },

    {
        7,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,

      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36
    },

    {
        7,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37
    },

    {
        7,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,

      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38
    },

    {
        7,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39

    },

    {
        7,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40
    },

    {
        7,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,

      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41
    },

    {
        7,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42
    },

    {
        7,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,

      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43
    },

    {
        7,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44

    },

    {
        7,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45
    },

    {
        7,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,

      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46
    },

    {
        7,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
       72,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47
    },

    {
        7,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,

      -48,  -48,  -48,  -48,  -48,   73,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48
    },

    {
        7,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,   74,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49

    },

    {
        7,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,   75,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50
    },

    {
        7,  -51,  -51,  -51,  -51,  -51,   76,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,

      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51
    },

    {
        7,  -52,  -52,  -52,  -52,  -52,   77,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52
    },

    {
        7,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,

      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,   78,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53
    },

    {
        7,  -54,  -54,  -54,  -54,   54,  -54,  -54,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54

    },

    {
        7,  -55,  -55,  -55,  -55,   54,  -55,  -55,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   81,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55
    },

    {
        7,  -56,  -56,  -56,  -56,   54,  -56,  -56,   79,   82,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  -56,

      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56
    },

    {
        7,  -57,  -57,  -57,  -57,   54,  -57,  -57,   79,   83,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57
    },

    {
        7,  -58,  -58,  -58,  -58,   54,  -58,  -58,   79,   54,
       54,   54,   54,   84,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58
    },

    {
        7,  -59,  -59,  -59,  -59,  -59,  -59,  -59,   85,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59

    },

    {
        7,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60
    },

    {
        7,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,   86,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,

      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61
    },

    {
        7,  -62,  -62,  -62,   59,   24,  -62,  -62,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   87,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62
    },

    {
        7,  -63,  -63,  -63,   88,   24,  -63,  -63,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63
    },

    {
        7,  -64,  -64,  -64,   59,   24,  -64,  -64,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       89,   90,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64

    },

    {
        7,  -65,  -65,  -65,   59,   24,  -65,  -65,   60,   24,
       24,   91,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65
    },

    {
        7,  -66,  -66,  -66,   59,   24,  -66,  -66,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   92,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -66,

      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66
    },

    {
        7,  -67,  -67,  -67,   59,   24,  -67,  -67,   60,   24,
       24,   24,   24,   24,   93,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67
    },

    {
        7,  -68,  -68,  -68,   59,   24,  -68,  -68,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   94,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68
    },

    {
        7,  -69,  -69,  -69,   59,   24,  -69,  -69,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   95,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69

    },

    {
        7,  -70,  -70,  -70,   59,   24,  -70,  -70,   60,   24,
       24,   24,   24,   24,   24,   96,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70
    },

    {
        7,  -71,  -71,  -71,   59,   24,  -71,  -71,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   97,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -71,

      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71
    },

    {
        7,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,   98,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72
    },

    {
        7,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,

      -73,  -73,  -73,   99,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73
    },

    {
        7,  -74,  -74,  -74,  -74,  -74,  100,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74

    },

    {
        7,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  101,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75
    },

    {
        7,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,

      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76
    },

    {
        7,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77
    },

    {
        7,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,

      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  102,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78
    },

    {
        7,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79

    },

    {
        7,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  103,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80
    },

    {
        7,  -81,  -81,  -81,  -81,   54,  -81,  -81,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
      104,  105,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  -81,

      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81
    },

    {
        7,  -82,  -82,  -82,  -82,   54,  -82,  -82,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,  106,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  -82,
      -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,
      -82,  -82,  -82,  -82
    },

    {
        7,  -83,  -83,  -83,  -83,   54,  -83,  -83,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,  107,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83
    },

    {
        7,  -84,  -84,  -84,  -84,   54,  -84,  -84,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,  108,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  -84,
      -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
      -84,  -84,  -84,  -84

    },

    {
        7,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85
    },

    {
        7,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,
      -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,
      -86,  -86,  -86,  -86,  -86,  -86,  109,  -86,  -86,  -86,
      -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,

      -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,
      -86,  -86,  -86,  -86
    },

    {
        7,  -87,  -87,  -87,  110,   24,  -87,  -87,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87
    },

    {
        7,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  111,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,

      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88
    },

    {
        7,  -89,  -89,  -89,   59,   24,  -89,  -89,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      112,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89

    },

    {
        7,  -90,  -90,  -90,   59,   24,  -90,  -90,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  113,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90
    },

    {
        7,  -91,  -91,  -91,   59,   24,  -91,  -91,   60,  114,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -91,

      -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91
    },

    {
        7,  -92,  -92,  -92,   59,   24,  -92,  -92,   60,   24,
       24,   24,   24,   24,   24,   24,  115,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92
    },

    {
        7,  -93,  -93,  -93,   59,   24,  -93,  -93,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,  116,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93
    },

    {
        7,  -94,  -94,  -94,   59,   24,  -94,  -94,   60,   24,
       24,   24,   24,   24,   24,   24,  117,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94

    },

    {
        7,  -95,  -95,  -95,   59,   24,  -95,  -95,   60,  118,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95
    },

    {
        7,  -96,  -96,  -96,   59,   24,  -96,  -96,   60,   24,
       24,   24,   24,   24,   24,   24,  119,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -96,

      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96
    },

    {
        7,  -97,  -97,  -97,   59,   24,  -97,  -97,   60,   24,
      120,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97
    },

    {
        7,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,

      -98,  -98,  -98,  -98,  -98,  -98,  121,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98
    },

    {
        7,  -99,  -99,  -99,  -99,  -99,  122,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99

    },

    {
        7, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100
    },

    {
        7, -101, -101, -101, -101, -101,  123, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,

     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101
    },

    {
        7, -102, -102, -102, -102, -102,  124, -102, -102, -102,
     -102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
     -102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
     -102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
     -102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
     -102, -102, -102, -102
    },

    {
        7, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,

     -103, -103, -103, -103, -103, -103,  125, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103
    },

    {
        7, -104, -104, -104, -104,   54, -104, -104,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
      126,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -104,
     -104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
     -104, -104, -104, -104

    },

    {
        7, -105, -105, -105, -105,   54, -105, -105,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,  127,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -105,
     -105, -105, -105, -105, -105, -105, -105, -105, -105, -105,
     -105, -105, -105, -105
    },

    {
        7, -106, -106, -106, -106,   54, -106, -106,   79,   54,
       54,   54,   54,   54,   54,   54,  128,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -106,

     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106
    },

    {
        7, -107, -107, -107, -107,   54, -107, -107,   79,  129,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -107,
     -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107
    },

    {
        7, -108, -108, -108, -108,   54, -108, -108,   79,   54,
      130,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -108,
     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108
    },

    {
        7, -109, -109, -109, -109, -109, -109, -109, -109,  131,
     -109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
     -109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
     -109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
     -109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
     -109, -109, -109, -109

    },

    {
        7, -110, -110, -110, -110, -110, -110, -110,  132, -110,
     -110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
     -110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
     -110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
     -110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
     -110, -110, -110, -110
    },

    {
        7, -111, -111, -111, -111, -111, -111, -111, -111, -111,
     -111, -111, -111, -111, -111, -111, -111, -111, -111, -111,
     -111, -111, -111, -111, -111, -111, -111, -111, -111, -111,
     -111, -111, -111, -111, -111, -111, -111, -111, -111, -111,

     -111, -111, -111, -111, -111, -111, -111, -111, -111, -111,
     -111, -111, -111, -111
    },

    {
        7, -112, -112, -112,   59,   24, -112, -112,   60,   24,
       24,   24,   24,  133,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -112,
     -112, -112, -112, -112, -112, -112, -112, -112, -112, -112,
     -112, -112, -112, -112
    },

    {
        7, -113, -113, -113,   59,   24, -113, -113,   60,   24,
       24,   24,   24,  134,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -113,
     -113, -113, -113, -113, -113, -113, -113, -113, -113, -113,
     -113, -113, -113, -113
    },

    {
        7, -114, -114, -114,   59,   24, -114, -114,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  135,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -114,
     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114

    },

    {
        7, -115, -115, -115,  136,   24, -115, -115,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  137,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -115,
     -115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
     -115, -115, -115, -115
    },

    {
        7, -116, -116, -116,   59,   24, -116, -116,   60,   24,
       24,   24,   24,  138,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -116,

     -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116
    },

    {
        7, -117, -117, -117,   59,   24, -117, -117,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  139,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -117,
     -117, -117, -117, -117, -117, -117, -117, -117, -117, -117,
     -117, -117, -117, -117
    },

    {
        7, -118, -118, -118,   59,   24, -118, -118,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

      140,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -118,
     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118
    },

    {
        7, -119, -119, -119,   59,   24, -119, -119,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  141,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -119,
     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119

    },

    {
        7, -120, -120, -120,   59,   24, -120, -120,  142,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -120,
     -120, -120, -120, -120, -120, -120, -120, -120, -120, -120,
     -120, -120, -120, -120
    },

    {
        7, -121, -121, -121, -121, -121, -121, -121, -121, -121,
     -121, -121, -121, -121, -121, -121,  143, -121, -121, -121,
     -121, -121, -121, -121, -121, -121, -121, -121, -121, -121,
     -121, -121, -121, -121, -121, -121, -121, -121, -121, -121,

     -121, -121, -121, -121, -121, -121, -121, -121, -121, -121,
     -121, -121, -121, -121
    },

    {
        7, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122
    },

    {
        7, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,

     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123
    },

    {
        7, -124, -124, -124, -124, -124, -124, -124, -124, -124,
     -124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
     -124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
     -124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
     -124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
     -124, -124, -124, -124

    },

    {
        7, -125, -125, -125, -125, -125, -125, -125, -125,  144,
     -125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
     -125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
     -125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
     -125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
     -125, -125, -125, -125
    },

    {
        7, -126, -126, -126, -126,   54, -126, -126,   79,   54,
       54,   54,   54,  145,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -126,

     -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126
    },

    {
        7, -127, -127, -127, -127,   54, -127, -127,   79,   54,
       54,   54,   54,  146,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -127,
     -127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127
    },

    {
        7, -128, -128, -128, -128,   54, -128, -128,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,  147,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -128,
     -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128
    },

    {
        7, -129, -129, -129, -129,   54, -129, -129,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
      148,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -129,
     -129, -129, -129, -129, -129, -129, -129, -129, -129, -129,
     -129, -129, -129, -129

    },

    {
        7, -130, -130, -130, -130,   54, -130, -130,  149,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130
    },

    {
        7, -131, -131, -131, -131, -131, -131, -131, -131, -131,
     -131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
     -131, -131, -131, -131,  150, -131, -131, -131, -131, -131,
     -131, -131, -131, -131, -131, -131, -131, -131, -131, -131,

     -131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
     -131, -131, -131, -131
    },

    {
        7, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132
    },

    {
        7, -133, -133, -133,   59,   24, -133, -133,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,  151,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -133,
     -133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
     -133, -133, -133, -133
    },

    {
        7, -134, -134, -134,   59,   24, -134, -134,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  152,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134

    },

    {
        7, -135, -135, -135,   59,   24, -135, -135,   60,   24,
       24,   24,   24,  153,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -135,
     -135, -135, -135, -135, -135, -135, -135, -135, -135, -135,
     -135, -135, -135, -135
    },

    {
        7, -136, -136, -136, -136, -136, -136, -136,  154, -136,
     -136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
     -136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
     -136, -136, -136, -136, -136, -136, -136, -136, -136, -136,

     -136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
     -136, -136, -136, -136
    },

    {
        7, -137, -137, -137, -137,  155, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137,   86, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137
    },

    {
        7, -138, -138, -138,   59,   24, -138, -138,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,  156,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138
    },

    {
        7, -139, -139, -139, -139, -139, -139, -139, -139, -139,
      157, -139,  158, -139, -139, -139, -139, -139, -139, -139,
     -139, -139, -139,  159, -139,   86, -139, -139, -139, -139,
     -139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
     -139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
     -139, -139, -139, -139

    },

    {
        7, -140, -140, -140,   59,   24, -140, -140,  160,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -140,
     -140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140
    },

    {
        7, -141, -141, -141,   59,   24, -141, -141,   60,   24,
       24,   24,   24,  161,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -141,

     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141
    },

    {
        7, -142, -142, -142, -142, -142, -142, -142, -142, -142,
     -142, -142, -142, -142, -142, -142, -142, -142, -142, -142,
     -142, -142, -142, -142, -142, -142, -142, -142, -142, -142,
     -142, -142, -142, -142, -142, -142, -142, -142, -142, -142,
     -142, -142, -142, -142, -142, -142, -142, -142, -142, -142,
     -142, -142, -142, -142
    },

    {
        7, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,

     -143, -143, -143, -143, -143, -143, -143, -143,  162, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143
    },

    {
        7, -144, -144, -144, -144, -144, -144, -144, -144, -144,
     -144, -144, -144, -144, -144, -144, -144, -144, -144, -144,
     -144, -144, -144, -144,  163, -144, -144, -144, -144, -144,
     -144, -144, -144, -144, -144, -144, -144, -144, -144, -144,
     -144, -144, -144, -144, -144, -144, -144, -144, -144, -144,
     -144, -144, -144, -144

    },

    {
        7, -145, -145, -145, -145,   54, -145, -145,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,  164,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -145,
     -145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
     -145, -145, -145, -145
    },

    {
        7, -146, -146, -146, -146,   54, -146, -146,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,  165,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -146,

     -146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
     -146, -146, -146, -146
    },

    {
        7, -147, -147, -147, -147, -147, -147, -147, -147, -147,
      166, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147,  167, -147,  103, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147
    },

    {
        7, -148, -148, -148, -148,   54, -148, -148,  168,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148
    },

    {
        7, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149

    },

    {
        7, -150, -150, -150,  169, -150, -150, -150,  170, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150
    },

    {
        7, -151, -151, -151,   59,   24, -151, -151,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  171,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -151,

     -151, -151, -151, -151, -151, -151, -151, -151, -151, -151,
     -151, -151, -151, -151
    },

    {
        7, -152, -152, -152,   59,   24, -152, -152,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  172,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152
    },

    {
        7, -153, -153, -153,   59,   24, -153, -153,   60,   24,
       24,   24,  173,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -153,
     -153, -153, -153, -153, -153, -153, -153, -153, -153, -153,
     -153, -153, -153, -153
    },

    {
        7, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154

    },

    {
        7, -155, -155, -155,  174,  155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155
    },

    {
        7, -156, -156, -156,   59,   24, -156, -156,   60,   24,
       24,  175,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -156,

     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156
    },

    {
        7, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157,  176, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157
    },

    {
        7, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,

     -158, -158,  177, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158
    },

    {
        7, -159, -159, -159, -159, -159, -159, -159, -159,  178,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159

    },

    {
        7,  179,  179,  179,  179,  179,  179, -160,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179
    },

    {
        7, -161, -161, -161,   59,   24, -161, -161,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  180,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -161,

     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161
    },

    {
        7, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162,  181, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162
    },

    {
        7, -163, -163, -163, -163, -163, -163, -163,  182, -163,
     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,

     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163, -163, -163, -163
    },

    {
        7, -164, -164, -164, -164,   54, -164, -164,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,  183,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -164,
     -164, -164, -164, -164, -164, -164, -164, -164, -164, -164,
     -164, -164, -164, -164

    },

    {
        7, -165, -165, -165, -165,   54, -165, -165,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,  184,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -165,
     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165
    },

    {
        7, -166, -166, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166,  185, -166, -166, -166, -166, -166,
     -166, -166, -166, -166, -166, -166, -166, -166, -166, -166,

     -166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166
    },

    {
        7, -167, -167, -167, -167, -167, -167, -167, -167,  186,
     -167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167
    },

    {
        7, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,

     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168
    },

    {
        7, -169, -169, -169, -169, -169, -169, -169,  187, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169

    },

    {
        7, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170
    },

    {
        7, -171, -171, -171,   59,   24, -171, -171,  188,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -171,

     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171
    },

    {
        7, -172, -172, -172,   59,   24, -172, -172,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  189,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172
    },

    {
        7, -173, -173, -173,   59,   24, -173, -173,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,  190,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173
    },

    {
        7, -174, -174, -174, -174, -174, -174, -174,  191, -174,
     -174, -174, -174, -174, -174, -174, -174, -174, -174, -174,
     -174, -174, -174, -174, -174, -174, -174, -174, -174, -174,
     -174, -174, -174, -174, -174, -174, -174, -174, -174, -174,
     -174, -174, -174, -174, -174, -174, -174, -174, -174, -174,
     -174, -174, -174, -174

    },

    {
        7, -175, -175, -175,   59,   24, -175, -175,   60,  192,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -175,
     -175, -175, -175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175
    },

    {
        7, -176, -176, -176, -176, -176, -176, -176, -176,  193,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,

     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176
    },

    {
        7, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177,  194,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177
    },

    {
        7, -178, -178, -178, -178, -178, -178, -178, -178, -178,
     -178, -178, -178, -178, -178, -178, -178, -178, -178, -178,

     -178, -178, -178, -178,  195, -178, -178, -178, -178, -178,
     -178, -178, -178, -178, -178, -178, -178, -178, -178, -178,
     -178, -178, -178, -178, -178, -178, -178, -178, -178, -178,
     -178, -178, -178, -178
    },

    {
        7,  179,  179,  179,  179,  179,  179, -179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179

    },

    {
        7, -180, -180, -180,   59,   24, -180, -180,   60,   24,
       24,  196,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -180,
     -180, -180, -180, -180, -180, -180, -180, -180, -180, -180,
     -180, -180, -180, -180
    },

    {
        7, -181, -181, -181, -181, -181, -181, -181, -181, -181,
     -181, -181, -181, -181, -181, -181, -181, -181, -181, -181,
     -181, -181,  197, -181, -181, -181, -181, -181, -181, -181,
     -181, -181, -181, -181, -181, -181, -181, -181, -181, -181,

     -181, -181, -181, -181, -181, -181, -181, -181, -181, -181,
     -181, -181, -181, -181
    },

    {
        7, -182, -182, -182, -182, -182, -182, -182, -182, -182,
     -182, -182, -182, -182, -182, -182, -182, -182, -182, -182,
     -182, -182, -182, -182, -182, -182, -182, -182, -182, -182,
     -182, -182, -182, -182, -182, -182, -182, -182, -182, -182,
     -182, -182, -182, -182, -182, -182, -182, -182, -182, -182,
     -182, -182, -182, -182
    },

    {
        7, -183, -183, -183, -183,   54, -183, -183,  198,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -183,
     -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183
    },

    {
        7, -184, -184, -184, -184,   54, -184, -184,   79,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,  199,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -184,
     -184, -184, -184, -184, -184, -184, -184, -184, -184, -184,
     -184, -184, -184, -184

    },

    {
        7, -185, -185, -185, -185, -185, -185, -185, -185,  200,
     -185, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185
    },

    {
        7, -186, -186, -186, -186, -186, -186, -186, -186, -186,
     -186, -186, -186, -186, -186, -186, -186, -186, -186, -186,
     -186, -186, -186, -186,  201, -186, -186, -186, -186, -186,
     -186, -186, -186, -186, -186, -186, -186, -186, -186, -186,

     -186, -186, -186, -186, -186, -186, -186, -186, -186, -186,
     -186, -186, -186, -186
    },

    {
        7, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187
    },

    {
        7,  202,  202,  202,  202,  202,  202, -188,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202
    },

    {
        7, -189, -189, -189,   59,   24, -189, -189,  203,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -189,
     -189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189

    },

    {
        7, -190, -190, -190,   59,   24, -190, -190,   60,   24,
       24,   24,   24,  204,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190
    },

    {
        7, -191, -191, -191, -191, -191, -191, -191, -191, -191,
     -191, -191, -191, -191, -191, -191, -191, -191, -191, -191,
     -191, -191, -191, -191, -191, -191, -191, -191, -191, -191,
     -191, -191, -191, -191, -191, -191, -191, -191, -191, -191,

     -191, -191, -191, -191, -191, -191, -191, -191, -191, -191,
     -191, -191, -191, -191
    },

    {
        7, -192, -192, -192,   59,   24, -192, -192,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  205,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -192,
     -192, -192, -192, -192, -192, -192, -192, -192, -192, -192,
     -192, -192, -192, -192
    },

    {
        7, -193, -193, -193, -193, -193, -193, -193,  206, -193,
     -193, -193, -193, -193, -193, -193, -193, -193, -193, -193,

     -193, -193, -193, -193, -193, -193, -193, -193, -193, -193,
     -193, -193, -193, -193, -193, -193, -193, -193, -193, -193,
     -193, -193, -193, -193, -193, -193, -193, -193, -193, -193,
     -193, -193, -193, -193
    },

    {
        7, -194, -194, -194, -194, -194, -194, -194, -194, -194,
     -194, -194, -194, -194, -194, -194, -194, -194, -194,  207,
     -194, -194, -194, -194, -194, -194, -194, -194, -194, -194,
     -194, -194, -194, -194, -194, -194, -194, -194, -194, -194,
     -194, -194, -194, -194, -194, -194, -194, -194, -194, -194,
     -194, -194, -194, -194

    },

    {
        7, -195, -195, -195, -195, -195, -195, -195,  208, -195,
     -195, -195, -195, -195, -195, -195, -195, -195, -195, -195,
     -195, -195, -195, -195, -195, -195, -195, -195, -195, -195,
     -195, -195, -195, -195, -195, -195, -195, -195, -195, -195,
     -195, -195, -195, -195, -195, -195, -195, -195, -195, -195,
     -195, -195, -195, -195
    },

    {
        7, -196, -196, -196,   59,   24, -196, -196,   60,  209,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -196,

     -196, -196, -196, -196, -196, -196, -196, -196, -196, -196,
     -196, -196, -196, -196
    },

    {
        7, -197, -197, -197, -197, -197, -197, -197, -197, -197,
     -197, -197, -197, -197, -197, -197, -197, -197, -197,  210,
     -197, -197, -197, -197, -197, -197, -197, -197, -197, -197,
     -197, -197, -197, -197, -197, -197, -197, -197, -197, -197,
     -197, -197, -197, -197, -197, -197, -197, -197, -197, -197,
     -197, -197, -197, -197
    },

    {
        7, -198, -198, -198, -198, -198, -198, -198, -198, -198,
     -198, -198, -198, -198, -198, -198, -198, -198, -198, -198,

     -198, -198, -198, -198, -198, -198, -198, -198, -198, -198,
     -198, -198, -198, -198, -198, -198, -198, -198, -198, -198,
     -198, -198, -198, -198, -198, -198, -198, -198, -198, -198,
     -198, -198, -198, -198
    },

    {
        7, -199, -199, -199, -199,   54, -199, -199,  211,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54, -199,
     -199, -199, -199, -199, -199, -199, -199, -199, -199, -199,
     -199, -199, -199, -199

    },

    {
        7, -200, -200, -200, -200, -200, -200, -200,  212, -200,
     -200, -200, -200, -200, -200, -200, -200, -200, -200, -200,
     -200, -200, -200, -200, -200, -200, -200, -200, -200, -200,
     -200, -200, -200, -200, -200, -200, -200, -200, -200, -200,
     -200, -200, -200, -200, -200, -200, -200, -200, -200, -200,
     -200, -200, -200, -200
    },

    {
        7, -201, -201, -201, -201, -201, -201, -201,  213, -201,
     -201, -201, -201, -201, -201, -201, -201, -201, -201, -201,
     -201, -201, -201, -201, -201, -201, -201, -201, -201, -201,
     -201, -201, -201, -201, -201, -201, -201, -201, -201, -201,

     -201, -201, -201, -201, -201, -201, -201, -201, -201, -201,
     -201, -201, -201, -201
    },

    {
        7,  202,  202,  202,  202,  202,  202, -202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202
    },

    {
        7, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203, -203, -203, -203, -203, -203, -203,

     -203, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203
    },

    {
        7, -204, -204, -204,   59,   24, -204, -204,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  214,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -204,
     -204, -204, -204, -204, -204, -204, -204, -204, -204, -204,
     -204, -204, -204, -204

    },

    {
        7, -205, -205, -205,   59,   24, -205, -205,   60,   24,
       24,   24,   24,  215,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -205,
     -205, -205, -205, -205, -205, -205, -205, -205, -205, -205,
     -205, -205, -205, -205
    },

    {
        7, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206, -206, -206, -206, -206, -206, -206,

     -206, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206
    },

    {
        7, -207, -207, -207, -207, -207, -207, -207, -207,  216,
     -207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207
    },

    {
        7, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,

     -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208
    },

    {
        7, -209, -209, -209,   59,   24, -209, -209,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  217,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209

    },

    {
        7, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210,  218,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210
    },

    {
        7, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,

     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211
    },

    {
        7, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212
    },

    {
        7, -213, -213, -213, -213, -213, -213, -213, -213, -213,
     -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,

     -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
     -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
     -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
     -213, -213, -213, -213
    },

    {
        7, -214, -214, -214,   59,   24, -214, -214,   60,   24,
       24,  219,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214

    },

    {
        7, -215, -215, -215,   59,   24, -215, -215,   60,   24,
       24,   24,  220,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -215,
     -215, -215, -215, -215, -215, -215, -215, -215, -215, -215,
     -215, -215, -215, -215
    },

    {
        7, -216, -216, -216, -216, -216, -216, -216, -216, -216,
     -216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
     -216, -216, -216, -216,  221, -216, -216, -216, -216, -216,
     -216, -216, -216, -216, -216, -216, -216, -216, -216, -216,

     -216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
     -216, -216, -216, -216
    },

    {
        7, -217, -217, -217,   59,   24, -217, -217,   60,   24,
       24,   24,   24,  222,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -217,
     -217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
     -217, -217, -217, -217
    },

    {
        7, -218, -218, -218, -218, -218, -218, -218, -218,  223,
     -218, -218, -218, -218, -218, -218, -218, -218, -218, -218,

     -218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
     -218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
     -218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
     -218, -218, -218, -218
    },

    {
        7, -219, -219, -219,   59,   24, -219, -219,   60,   24,
       24,   24,   24,  224,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219

    },

    {
        7, -220, -220, -220,   59,   24, -220, -220,   60,   24,
      225,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220
    },

    {
        7, -221, -221, -221, -221, -221, -221, -221,  226, -221,
     -221, -221, -221, -221, -221, -221, -221, -221, -221, -221,
     -221, -221, -221, -221, -221,  227, -221, -221, -221, -221,
     -221, -221, -221, -221, -221, -221, -221, -221, -221, -221,

     -221, -221, -221, -221, -221, -221, -221, -221, -221, -221,
     -221, -221, -221, -221
    },

    {
        7, -222, -222, -222,   59,   24, -222, -222,   60,   24,
       24,   24,  228,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -222,
     -222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
     -222, -222, -222, -222
    },

    {
        7, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,

     -223, -223, -223, -223,  229, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223
    },

    {
        7, -224, -224, -224,   59,   24, -224, -224,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  230,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -224,
     -224, -224, -224, -224, -224, -224, -224, -224, -224, -224,
     -224, -224, -224, -224

    },

    {
        7, -225, -225, -225,   59,   24, -225, -225,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  231,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -225,
     -225, -225, -225, -225, -225, -225, -225, -225, -225, -225,
     -225, -225, -225, -225
    },

    {
        7, -226, -226, -226, -226, -226, -226, -226, -226, -226,
     -226, -226, -226, -226, -226, -226, -226, -226, -226, -226,
     -226, -226, -226, -226, -226, -226, -226, -226, -226, -226,
     -226, -226, -226, -226, -226, -226, -226, -226, -226, -226,

     -226, -226, -226, -226, -226, -226, -226, -226, -226, -226,
     -226, -226, -226, -226
    },

    {
        7, -227, -227, -227, -227, -227, -227, -227,  232, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227
    },

    {
        7, -228, -228, -228,   59,   24, -228, -228,   60,   24,
      233,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228
    },

    {
        7, -229, -229, -229, -229, -229, -229, -229,  234, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229,  235, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229

    },

    {
        7, -230, -230, -230,   59,   24, -230, -230,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  236,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -230,
     -230, -230, -230, -230, -230, -230, -230, -230, -230, -230,
     -230, -230, -230, -230
    },

    {
        7, -231, -231, -231,   59,   24, -231, -231,   60,  237,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -231,

     -231, -231, -231, -231, -231, -231, -231, -231, -231, -231,
     -231, -231, -231, -231
    },

    {
        7, -232, -232, -232, -232, -232, -232, -232, -232, -232,
     -232, -232, -232, -232, -232, -232, -232, -232, -232, -232,
     -232, -232, -232, -232, -232, -232, -232, -232, -232, -232,
     -232, -232, -232, -232, -232, -232, -232, -232, -232, -232,
     -232, -232, -232, -232, -232, -232, -232, -232, -232, -232,
     -232, -232, -232, -232
    },

    {
        7, -233, -233, -233,   59,   24, -233, -233,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,  238,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -233,
     -233, -233, -233, -233, -233, -233, -233, -233, -233, -233,
     -233, -233, -233, -233
    },

    {
        7, -234, -234, -234, -234, -234, -234, -234, -234, -234,
     -234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
     -234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
     -234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
     -234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
     -234, -234, -234, -234

    },

    {
        7, -235, -235, -235, -235, -235, -235, -235,  239, -235,
     -235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
     -235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
     -235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
     -235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
     -235, -235, -235, -235
    },

    {
        7, -236, -236, -236,  240,   24, -236, -236,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -236,

     -236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
     -236, -236, -236, -236
    },

    {
        7, -237, -237, -237,   59,   24, -237, -237,   60,   24,
       24,  241,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -237,
     -237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
     -237, -237, -237, -237
    },

    {
        7, -238, -238, -238,   59,   24, -238, -238,   60,  242,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -238,
     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238
    },

    {
        7, -239, -239, -239, -239, -239, -239, -239, -239, -239,
     -239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
     -239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
     -239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
     -239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
     -239, -239, -239, -239

    },

    {
        7, -240, -240, -240, -240, -240, -240, -240,  243, -240,
     -240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
     -240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
     -240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
     -240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
     -240, -240, -240, -240
    },

    {
        7, -241, -241, -241,   59,   24, -241, -241,   60,   24,
       24,   24,   24,  244,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -241,

     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241
    },

    {
        7, -242, -242, -242,   59,   24, -242, -242,   60,   24,
       24,  245,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -242,
     -242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
     -242, -242, -242, -242
    },

    {
        7, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,

     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243
    },

    {
        7, -244, -244, -244,  246,   24, -244, -244,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -244,
     -244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244

    },

    {
        7, -245, -245, -245,   59,   24, -245, -245,   60,   24,
       24,   24,   24,  247,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -245,
     -245, -245, -245, -245, -245, -245, -245, -245, -245, -245,
     -245, -245, -245, -245
    },

    {
        7, -246, -246, -246, -246, -246, -246, -246,  248, -246,
     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,

     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246
    },

    {
        7, -247, -247, -247,  249,   24, -247, -247,   60,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   61,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24, -247,
     -247, -247, -247, -247, -247, -247, -247, -247, -247, -247,
     -247, -247, -247, -247
    },

    {
        7, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,

     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248
    },

    {
        7, -249, -249, -249, -249, -249, -249, -249,  250, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249

    },

    {
        7, -250, -250, -250, -250, -250, -250, -250, -250, -250,
     -250, -250, -250, -250, -250, -250, -250, -250, -250, -250,
     -250, -250, -250, -250, -250, -250, -250, -250, -250, -250,
     -250, -250, -250, -250, -250, -250, -250, -250, -250, -250,
     -250, -250, -250, -250, -250, -250, -250, -250, -250, -250,
     -250, -250, -250, -250
    },

    } ;

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 51
#define YY_END_OF_BUFFER 52
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[251] =
    {   0,
        0,    0,    0,    0,    0,    0,   52,   48,   49,   48,
       48,   48,   48,   48,   50,   50,   51,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   11,   10,   36,   34,   38,   39,
       35,   33,   37,   30,   32,   31,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   40,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    4,    3,    0,   44,    0,
        0,    0,    0,    0,   46,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    5,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       23,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   22,    2,    1,    0,    0,    0,    0,    0,    0,
        0,    6,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   28,    0,    0,    0,    0,    0,    0,   29,    0,
        0,    0,    0,   42,    0,    0,    0,    0,    0,   26,
        0,    0,    0,    0,    0,    0,    0,   27,    0,   43,
        0,    0,    0,    0,    0,    0,    0,    0,   26,    0,
        0,   45,    0,    0,    0,    0,   47,   24,    0,    0,
       41,    0,    0,    0,    0,    0,    0,   25,    0,    0,

        0,   24,   20,    0,    0,   18,    0,   16,    0,    0,
       21,   19,   17,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   14,    0,    0,    0,    0,
        0,   12,    0,   15,    0,    0,    0,    0,   13,    0,
        0,    0,    9,    0,    0,    0,    0,    7,    0,    8
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    6,    7,
        1,    8,    1,    1,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   18,   19,   20,   21,   22,   23,
       18,   24,   25,   26,   18,   27,   18,   18,   18,   18,
        1,    1,    1,    1,   28,    1,   29,   18,   18,   18,

       18,   18,   30,   18,   18,   18,   18,   31,   32,   18,
       33,   34,   35,   18,   36,   37,   38,   18,   18,   18,
       18,   18,    1,    1,    1,    1,    1,    1,    1,   39,
        1,    1,   40,   41,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   42,   43,    1,    1,    1,
        1,   44,    1,    1,    1,    1,    1,    1,   45,    1,
       46,    1,    1,    1,   47,   48,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   49,    1,    1,    1,    1,    1,    1,
       50,    1,    1,   51,   52,    1,   53,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "apertium-postlatex.l"
#line 4 "apertium-postlatex.l"



#include <cstdlib>
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <apertium/latex_accentsmap.h>

extern "C" {
#if !defined(__STDC__)
# define __STDC__ 1
#endif
#include <regex.h>
}

#include <string>
#include <lttoolbox/lt_locale.h>
#include <lttoolbox/ltstr.h>
#ifndef GENFORMAT
#include "apertium_config.h"
#endif
#include <apertium/unlocked_cstdio.h>
#ifdef _WIN32
#include <io.h>
#include <fcntl.h>
#endif

using namespace std;

AccentsMap accentsMap(true);
wstring closesym = L"";
string memconv = "";

wstring convertir(string const &multibyte, int const length)
{
  memconv.append(multibyte.c_str(), length);
  int tam = memconv.size();
  wchar_t *retval = new wchar_t[tam+1];
  size_t l = mbstowcs(retval, memconv.c_str(), tam);

  if(l == ((size_t) -1))
  {
    delete[] retval;
    if(memconv.size() >= 4)
    {
      wcerr << L"Warning: wrong encoding" << endl;
    }
    return L"";
  }
  else
  {
    memconv = "";
    retval[l] = 0;
    wstring ret = retval;
    delete[] retval;
    return ret;
  }
}






#line 2944 "apertium_postlatex.cc"

#define INITIAL 0
#define mathenv 1
#define readbrackets 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 78 "apertium-postlatex.l"




#line 3157 "apertium_postlatex.cc"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		while ( (yy_current_state = yy_nxt[yy_current_state][ yy_ec[YY_SC_TO_UI(*yy_cp)]  ]) > 0 )
			{
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}

			++yy_cp;
			}

		yy_current_state = -yy_current_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 82 "apertium-postlatex.l"
{
	fputws(L"\"",yyout);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 85 "apertium-postlatex.l"
{
	fputws(L"\'",yyout);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 88 "apertium-postlatex.l"
{
	fputws(L"<",yyout);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 91 "apertium-postlatex.l"
{
	fputws(L">",yyout);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 94 "apertium-postlatex.l"
{
	fputws(L"\\&",yyout);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 97 "apertium-postlatex.l"
{
	fputws(L"&",yyout);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 101 "apertium-postlatex.l"
{
        fputws(L"\\{", yyout);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 105 "apertium-postlatex.l"
{
        fputws(L"\\}", yyout);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 109 "apertium-postlatex.l"
{
        fputws(L"\\%", yyout);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 113 "apertium-postlatex.l"
{
	fputws(L"?`",yyout);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 117 "apertium-postlatex.l"
{
	fputws(L"!`",yyout);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 123 "apertium-postlatex.l"
{
	BEGIN(mathenv);
	fputws(L"$$",yyout);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 128 "apertium-postlatex.l"
{
	fputws(L"$$",yyout);
	BEGIN(0);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 134 "apertium-postlatex.l"
{
	BEGIN(mathenv);
	fputws(L"$",yyout);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 139 "apertium-postlatex.l"
{
	fputws(L"$",yyout);
	BEGIN(0);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 144 "apertium-postlatex.l"
{
	fputws(L"\\(",yyout);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 148 "apertium-postlatex.l"
{
	fputws(L"\\)",yyout);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 152 "apertium-postlatex.l"
{
	fputws(L"\\[",yyout);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 156 "apertium-postlatex.l"
{
	fputws(L"\\]",yyout);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 161 "apertium-postlatex.l"
{
	fputws(L"{",yyout);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 165 "apertium-postlatex.l"
{
	fputws(L"}",yyout);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 169 "apertium-postlatex.l"
{
	fputws(L"~",yyout);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 175 "apertium-postlatex.l"
{
	fputws(L"\\\\",yyout);
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 179 "apertium-postlatex.l"
{
	fputws((wstring(L"\%")+convertir(yytext+9,yyleng-9)).c_str(),yyout);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 183 "apertium-postlatex.l"
{
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 187 "apertium-postlatex.l"
{
	fputws((wstring(L"[")+convertir(yytext+7,yyleng-7)).c_str(),yyout);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 190 "apertium-postlatex.l"
{
	fputws(L"]", yyout);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 194 "apertium-postlatex.l"
{
        fputws(L"\\verb", yyout);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 198 "apertium-postlatex.l"
{
        ;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 204 "apertium-postlatex.l"
{
	fputws(L"\\l", yyout);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 209 "apertium-postlatex.l"
{
	fputws(L"{\\oe}",yyout);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 213 "apertium-postlatex.l"
{
	fputws(L"{\\OE}",yyout);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 217 "apertium-postlatex.l"
{
	fputws(L"{\\ae}",yyout);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 221 "apertium-postlatex.l"
{
	fputws(L"{\\AE}",yyout);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 225 "apertium-postlatex.l"
{
	fputws(L"{\\aa}",yyout);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 229 "apertium-postlatex.l"
{
	fputws(L"{\\AA}",yyout);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 233 "apertium-postlatex.l"
{
	fputws(L"{\\o}",yyout);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 237 "apertium-postlatex.l"
{
	fputws(L"{\\O}",yyout);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 241 "apertium-postlatex.l"
{
	fputws(L"{\\ss}",yyout);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 245 "apertium-postlatex.l"
{
	fputws((wstring(L"\\begin{")+convertir(yytext+1,yyleng-2)+wstring(L"}")).c_str(),yyout);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 249 "apertium-postlatex.l"
{
	fputws((wstring(L"\\#")+convertir(yytext+6,yyleng-8)).c_str(),yyout);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 253 "apertium-postlatex.l"
{
        fputws(L"\\#", yyout);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 257 "apertium-postlatex.l"
{
	fputws((wstring(L"\\begin{")+convertir(yytext+1,yyleng-7)+wstring(L"*}")).c_str(),yyout);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 261 "apertium-postlatex.l"
{
	fputws((wstring(L"\\end{")+convertir(yytext+2,yyleng-3)+wstring(L"}")).c_str(),yyout);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 265 "apertium-postlatex.l"
{
	fputws((wstring(L"\\end{")+convertir(yytext+2,yyleng-8)+wstring(L"*}")).c_str(),yyout);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 269 "apertium-postlatex.l"
{
	fputws((wstring(L"\\")+convertir(yytext+1,yyleng-3)).c_str(),yyout);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 273 "apertium-postlatex.l"
{
	fputws((wstring(L"\\")+convertir(yytext+1,yyleng-8)+wstring(L"*")).c_str(),yyout);
}
	YY_BREAK
/*NO ENTIENDO ESTA REGLA
 \#	{
        fputws(L"\\#", yyout);
 }*/
case 48:
YY_RULE_SETUP
#line 282 "apertium-postlatex.l"
{
	wstring wt = convertir(yytext,yyleng);
	wstring wa = accentsMap.get(wt);
	if( wa == L"" )
		fputws(wt.c_str(),yyout);
 	else
		fputws(wstring(L"\\"+wa.substr(0,1)+L"{"+wa.substr(1)+L"}").c_str(),yyout);
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 292 "apertium-postlatex.l"
{
	fputws(convertir(yytext,yyleng).c_str(),yyout);
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 296 "apertium-postlatex.l"
{
	fputws(convertir(yytext,yyleng).c_str(),yyout);
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(mathenv):
case YY_STATE_EOF(readbrackets):
#line 301 "apertium-postlatex.l"
{
	return 0;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 304 "apertium-postlatex.l"
ECHO;
	YY_BREAK
#line 3581 "apertium_postlatex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state = yy_nxt[yy_current_state][(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)];
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	yy_current_state = yy_nxt[yy_current_state][1];
	yy_is_jam = (yy_current_state <= 0);

	if ( ! yy_is_jam )
		{
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 303 "apertium-postlatex.l"





void usage(string const &progname)
{

  cerr << "USAGE: " << progname << " [input_file [output_file]" << ']' << endl;

  cerr << "LaTeX format postprocessor " << endl;
  exit(EXIT_SUCCESS);
}

int main(int argc, char *argv[])
{
  LtLocale::tryToSetLocale();
  size_t base = 0;

  if(argc >= 2 && !strcmp(argv[1],"-i"))
  {
    base++;
  }

 if((argc-base) > 4)
  {
    usage(argv[0]);
  }

  switch(argc-base)
  {
    case 3:
      yyout = fopen(argv[2+base], "w");
      if(!yyout)
      {
        usage(argv[0]);
      }
    case 2:
      yyin = fopen(argv[1+base], "r");
      if(!yyin)
      {
        usage(argv[0]);
      }
      break;
    default:
      break;
  }

#ifdef _WIN32
  _setmode(_fileno(yyin), _O_U8TEXT);
  _setmode(_fileno(yyout), _O_U8TEXT);
#endif
  // prevent warning message
  yy_push_state(1);
  yy_top_state();
  yy_pop_state();

  yylex();

  fclose(yyin);
  fclose(yyout);
}

